{"ast":null,"code":"const submitIcon = document.querySelector('#submit-icon');\nconst inputElement = document.querySelector('input');\nconst imageSection = document.querySelector('.images-section');\nconst getImages = async () => {\n  const prompt = inputElement.value;\n  const n = 4;\n  const size = '1024x1024';\n  try {\n    const response = await fetch('http://localhost:3001/api/generate-images', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        prompt,\n        n,\n        size\n      })\n    });\n    if (!response.ok) {\n      throw new Error(`Error fetching images: ${response.statusText}`);\n    }\n    const data = await response.json();\n    if (!data || !data.data || !Array.isArray(data.data)) {\n      throw new Error('Invalid response format from the API');\n    }\n    data.data.forEach(imageObject => {\n      const imageContainer = document.createElement('div');\n      imageContainer.classList.add('image-container');\n      const imageElement = document.createElement('img');\n      imageElement.setAttribute('src', imageObject.url);\n      imageContainer.append(imageElement);\n      imageSection.append(imageContainer);\n    });\n  } catch (error) {\n    console.error('Error fetching images:', error);\n    // Handle the error appropriately, e.g., display an error message to the user\n  }\n};\n\nconst handleEnterKeyPress = event => {\n  if (event.key === 'Enter') {\n    getImages();\n  }\n};\nsubmitIcon.addEventListener('click', getImages);\ninputElement.addEventListener('keypress', handleEnterKeyPress);","map":{"version":3,"names":["submitIcon","document","querySelector","inputElement","imageSection","getImages","prompt","value","n","size","response","fetch","method","headers","body","JSON","stringify","ok","Error","statusText","data","json","Array","isArray","forEach","imageObject","imageContainer","createElement","classList","add","imageElement","setAttribute","url","append","error","console","handleEnterKeyPress","event","key","addEventListener"],"sources":["/Users/oscarsant/total_repaso/projects/dalle_imagegenerator_app/frontend/src/App.js"],"sourcesContent":["\nconst submitIcon = document.querySelector('#submit-icon');\nconst inputElement = document.querySelector('input');\nconst imageSection = document.querySelector('.images-section');\n\nconst getImages = async () => {\n  const prompt = inputElement.value;\n  const n = 4;\n  const size = '1024x1024';\n\n  try {\n    const response = await fetch('http://localhost:3001/api/generate-images', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ prompt, n, size })\n    });\n\n    if (!response.ok) {\n      throw new Error(`Error fetching images: ${response.statusText}`);\n    }\n\n    const data = await response.json();\n\n    if (!data || !data.data || !Array.isArray(data.data)) {\n      throw new Error('Invalid response format from the API');\n    }\n\n    data.data.forEach((imageObject) => {\n      const imageContainer = document.createElement('div');\n      imageContainer.classList.add('image-container');\n      const imageElement = document.createElement('img');\n      imageElement.setAttribute('src', imageObject.url);\n      imageContainer.append(imageElement);\n      imageSection.append(imageContainer);\n    });\n  } catch (error) {\n    console.error('Error fetching images:', error);\n    // Handle the error appropriately, e.g., display an error message to the user\n  }\n};\n\nconst handleEnterKeyPress = (event) => {\n  if (event.key === 'Enter') {\n    getImages();\n  }\n};\n\nsubmitIcon.addEventListener('click', getImages);\ninputElement.addEventListener('keypress', handleEnterKeyPress);\n"],"mappings":"AACA,MAAMA,UAAU,GAAGC,QAAQ,CAACC,aAAa,CAAC,cAAc,CAAC;AACzD,MAAMC,YAAY,GAAGF,QAAQ,CAACC,aAAa,CAAC,OAAO,CAAC;AACpD,MAAME,YAAY,GAAGH,QAAQ,CAACC,aAAa,CAAC,iBAAiB,CAAC;AAE9D,MAAMG,SAAS,GAAG,MAAAA,CAAA,KAAY;EAC5B,MAAMC,MAAM,GAAGH,YAAY,CAACI,KAAK;EACjC,MAAMC,CAAC,GAAG,CAAC;EACX,MAAMC,IAAI,GAAG,WAAW;EAExB,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,2CAA2C,EAAE;MACxEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEV,MAAM;QAAEE,CAAC;QAAEC;MAAK,CAAC;IAC1C,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAE,0BAAyBR,QAAQ,CAACS,UAAW,EAAC,CAAC;IAClE;IAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;IAElC,IAAI,CAACD,IAAI,IAAI,CAACA,IAAI,CAACA,IAAI,IAAI,CAACE,KAAK,CAACC,OAAO,CAACH,IAAI,CAACA,IAAI,CAAC,EAAE;MACpD,MAAM,IAAIF,KAAK,CAAC,sCAAsC,CAAC;IACzD;IAEAE,IAAI,CAACA,IAAI,CAACI,OAAO,CAAEC,WAAW,IAAK;MACjC,MAAMC,cAAc,GAAGzB,QAAQ,CAAC0B,aAAa,CAAC,KAAK,CAAC;MACpDD,cAAc,CAACE,SAAS,CAACC,GAAG,CAAC,iBAAiB,CAAC;MAC/C,MAAMC,YAAY,GAAG7B,QAAQ,CAAC0B,aAAa,CAAC,KAAK,CAAC;MAClDG,YAAY,CAACC,YAAY,CAAC,KAAK,EAAEN,WAAW,CAACO,GAAG,CAAC;MACjDN,cAAc,CAACO,MAAM,CAACH,YAAY,CAAC;MACnC1B,YAAY,CAAC6B,MAAM,CAACP,cAAc,CAAC;IACrC,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOQ,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C;EACF;AACF,CAAC;;AAED,MAAME,mBAAmB,GAAIC,KAAK,IAAK;EACrC,IAAIA,KAAK,CAACC,GAAG,KAAK,OAAO,EAAE;IACzBjC,SAAS,CAAC,CAAC;EACb;AACF,CAAC;AAEDL,UAAU,CAACuC,gBAAgB,CAAC,OAAO,EAAElC,SAAS,CAAC;AAC/CF,YAAY,CAACoC,gBAAgB,CAAC,UAAU,EAAEH,mBAAmB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}